% PottersWheel model definition file
% This file is constructed as a Matlab function.
% The returned variable "m" contains all required information of the model.
% For more information visit www.potterswheel.de

function m = TNF_Model_TNF_TPL()

m = pwGetEmptyModel();

%% General information:
%% This is the code for paper titled "Modulation of signaling cross-talk between pJNK and pAKT generates optimal apoptotic response"
% Authors: Sharmila Biswas1,¶ , Baishakhi Tikader2, ¶, Sandip Kar2*, Ganesh Viswanathan1*
%1Department of Chemical Engineering, Indian Institute of Technology Bombay, Mumbai, India.
%2Department of Chemistry, Indian Institute of Technology Bombay, Mumbai, India.
%¶These authors contributed equally to this work
%*Corresponding authors 
%E-mail: sandipkar@iitb.ac.in, ganeshav@iitb.ac.in
% Model developer: Baishakhi Tikader
%% This code can be used for generating Fig 2.
%% Meta information
m.name        = 'This is the code for paper titled "Modulation of signaling cross-talk between pJNK and pAKT generates optimal apoptotic response"';
m.description = 'This file can be mapped with "Data-file-for-fitting-TNF-TPL", for details see read me file';
m.authors     = {'Sharmila Biswas, Baishakhi Tikader, Sandip Kar, Ganesh Viswanathan; This code has been generated by Baishakhi Tikader'};
m.dates       = {'2019-12-09'};
m.modelFormat = 3.0;

%% Default sampling time points
m.t = 0:10:200;
%% X - Dynamic variables
% m = pwAddX(m, *ID, *startValue, fitSetting, minValue, maxValue, unit, compartment, name, description, typeOfStartValue, designerProps, classname)
% ID:              Unique name, e.g. 'ProtA'
% startValue:      The value of X at integration start time (default 0)
% fitSetting:      'global', 'local' (default), 'fix' (startValue will be fitted globally or locally or is fixed)
% min/maxValue:    Minimum and maximum of the startValue during fitting
% unit:            Unit of X
% compartment:     Compartment of X. Default: first given compartment
% typeOfStartValue: 'amount' or 'concentration' (default)
% designerProps:   Designer information, e.g. position and coloring
% classname:       Subgroup of the X variable, e.g. 'protein.receptor'.
% Not listed X variables which occur in the reactions get the default settings
m = pwAddX(m, 'pJNK'  ,  1, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [600 70 0 100 40 0 0 1 0 0 1 1]                                );
m = pwAddX(m, 'C1Pa'  ,  0, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [1119.61524227066 970 0 100 40 1 0.333333333333333 0 0 0 1 1]  );
m = pwAddX(m, 'pAKT'  ,  1, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [80.3847577293369 970 0 100 40 0 0 0 0 0 1 1]                  );
m = pwAddX(m, 'JNKT'  , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [1185 205 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'C1PT'  , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [1085 85 0 100 40 1 0 0 0 0 0 1]                               );
m = pwAddX(m, 'AKTT'  , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [-25 -45 0 100 40 1 0 0 0 0 0 1]                               );
m = pwAddX(m, 'pERK'  ,  1, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [-75 215 0 100 40 1 0 0 0 0 0 1]                               );
m = pwAddX(m, 'ERKT'  , 50, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [-575 -245 0 100 40 1 0 0 0 0 0 1]                             );
m = pwAddX(m, 'XGa'   ,  0, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [1565 -495 0 100 40 1 0 0 0 0 0 1]                             );
m = pwAddX(m, 'XGT'   , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [115 -355 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'NFkBa' ,  0, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [1375 -305 0 100 40 1 0 0 0 0 0 1]                             );
m = pwAddX(m, 'NFkBT' , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [1065 -45 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'TNFR1a',  0, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [2275 485 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'TNFR1T', 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [635 1025 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'PTENa' ,  0, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [705 -555 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'PTENT' , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [735 -325 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'RAFa'  ,  0, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [-95 -175 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'RAFT'  , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [-225 -35 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'PI3Ka' ,  0, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [-755 645 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'PI3KT' , 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [895 -405 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'Csps3a',  1, 'fix',     0,     [],   [], 'C1', []  , []  , []             , [1355 335 0 100 40 1 0 0 0 0 0 1]                              );
m = pwAddX(m, 'Csps3T', 10, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [-225 -245 0 100 40 1 0 0 0 0 0 1]                             );
m = pwAddX(m, 'TNF'   ,  6, 'fix',    [],     [],   [], 'C1', []  , []  , []             , [1725 -195 0 100 40 1 0 0 0 0 0 1]                             );
m = pwAddX(m, 'INHBT1', 60, 'fix',     0,     [],   [], 'C1');
m = pwAddX(m, 'MEKK1a',  0, 'fix',     0,     [],   [], 'C1');
m = pwAddX(m, 'MEKK1T', 10, 'fix',    [],     [],   [], 'C1');
m = pwAddX(m, 'ROSa'  ,  0, 'fix',     0,     [],   [], 'C1');
m = pwAddX(m, 'ROST'  , 10, 'fix',    [],     [],   [], 'C1');
m = pwAddX(m, 'CERa'  ,  0, 'fix',     0,     [],   [], 'C1');
m = pwAddX(m, 'CERT'  , 10, 'fix',    [],     [],   [], 'C1');
m = pwAddX(m, 'CAPPa' ,  0, 'fix',     0,     [],   [], 'C1');
m = pwAddX(m, 'CAPPT' , 10, 'fix',    [],     [],   [], 'C1');
m = pwAddX(m, 'Bcl2a' ,  0, 'fix',     0,     [],   [], 'C1');
m = pwAddX(m, 'Bcl2T' , 10, 'fix',    [],     [],   [], 'C1');
%% K - Dynamic parameters
% m = pwAddK(m, *ID, *value, fitSetting, minValue, maxValue, unit, name, description)
% ID:         ID of the parameter
% value:      Value of the parameter
% fitSetting: 'global', 'local', 'fix' (during fitting)
% min/maxValue Limits for the parameter during parameter calibration
m = pwAddK(m, 'Kbxg'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Knaxp1' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbc1'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kcac1'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kcac2'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kberk'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kmae'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbpt'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Knip'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbnf'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktnf'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kpin'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbp3k'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktpi1'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbdp3k' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbak'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kpaak'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbdak'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbcs3'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kjacs3' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Knics3' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kaics3' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Keics3' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktnf2'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kinhb'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktnf1'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbraf'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kair'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Keir'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdjnk'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdbrk'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdbraf' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdbpt'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdbnf'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdbcs3' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbjnk'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kxij'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Keij'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kcajk'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kpaer'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Keic1'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Keic2'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Keij1'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Keij2'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktacs'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdxg'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kjae'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktnar'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kjan'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kpip3'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'n1'     , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbmkk1' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktamkk1', 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdmkk1' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Krakk4' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kaikk4' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kmk4aj' , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kjaa'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kjar'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdros'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbros'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbcer'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Ktcr'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdcer'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'kpicr'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbcpp'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kacp'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kdcpp'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kcpia'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbx'    , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Knix'   , 2   , 'global', 1     , 10000);
m = pwAddK(m, 'Kdx'    , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kxaa'   , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kaic1'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kaic2'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'kn2'    , 2   , 'global', 1     , 10000);
m = pwAddK(m, 'Kjac2'  , 0.01, 'global', 0.0001, 10000);
m = pwAddK(m, 'Kbase'  , 0.1 , 'global', 0.0001, 10000);
%% R - Reactions
% m = pwAddR(m, *ID, *reactants, *products, *modifiers, *type, *options, *rateSignature, *parameters, description, name, fast, compartments, parameterTrunks, designerPropsR, stoichiometry, reversible)
% ID:         ID of the reaction
% reactants:  IDs of the used reactants, e.g. {'ProtA','ProtB'}
% products:   IDs of the products, e.g. {'ProtC'}
% modifiers:  IDs of the modifiers, i.e. species which are not consumed or produced in the reaction, e.g. {'Enzyme1'}
% parameters: IDs of the parameters, e.g. {'Param1', 'Param2'}
% type:       (kinetics of the reaction): A (automatic), MM (Michaelis Menten with enzyme), MM2 (Michaelis-Menten with Vmax), Hill, C (custom), D (delay)
% options:    Number of steps used for a delay reaction D. Else empty ([])
% rateSignature: Reaction rate for custom kinetics (C) expressed with placeholders, e.g. 'k1 * r1' or 'k1 * m1 * r1 / (k2 + r1)'
%       k1 represents the first parameter of the present reaction, 
%       k2 the second parameter, etc. Reactants are represented with r1, r2, ...
%       Modifiers are expressed with m1, m2, ...
%       Products are expressed with p1, p2, ...
%       Use this only for custom kinetics (C), else use [] .
m = pwAddR(m, 'R01', {  }, {'pJNK'  }, {'JNK','C1Pa','XGa','pERK','MEKK1a'           }, 'C' , [] , 'k1*m1 + k2*m1*m2 - (k3*p1*m3) - (k4*m4*p1)/(k5+k6*m4) - k7*p1 + (k8*m1*m5)'                                                   , {'Kbjnk','Kcajk','Kxij','Keij','Keij1','Keij2','Kdjnk','Kmk4aj'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R02', {  }, {'XGa'   }, {'NFkBa','XG'                                 }, 'C' , [] , 'k1*m2+ k2*m1*m2 - k3*p1'                                                                                                      , {'Kbxg','Knaxp1','Kdxg'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R03', {  }, {'C1Pa'  }, {'C1P','CERa'                                 }, 'C' , [] , 'k1*m1 + k2*m1*m2 - k3*p1 '                                                                                                    , {'Kbc1','Kcac1','Kcac2'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R04', {  }, {'pERK'  }, {'ERK','RAFa','pJNK','PI3Ka'                  }, 'C' , [] , 'k1*m1 + k2*m1*m2  + k3*m1*m3 + k4*m4*m1 - k5*p1'                                                                              , {'Kberk','Kmae','Kjae','Kpaer','Kdbrk'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R05', {  }, {'RAFa'  }, {'RAF','TNFR1a','pAKT','pERK'                 }, 'C' , [] , 'k1*m1 + k2*m1*m2 - k3*m3*p1 - k4*m4*p1 - k5*p1'                                                                               , {'Kbraf','Ktnar','Kair','Keir','Kdbraf'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R06', {  }, {'NFkBa' }, {'NFkB','PTENa','TNFR1a','INHBT1','pJNK'      }, 'C' , [] , '(k1*m1)/(1+k4*m4) + (k2*m1*m3)/(1+k4*m4)- k3*m2*p1  - k5*p1 + (k6*m5*m1)'                                                     , {'Kbnf','Ktnf','Kpin','Kinhb','Kdbnf','Kjan'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R07', {  }, {'PI3Ka' }, {'PI3K','TNFR1a','PTENa'                      }, 'C' , [] , 'k1*m1 + (k2*m1*m2) - k3*m3*p1-k4*p1'                                                                                          , {'Kbp3k','Ktpi1','Kpip3','Kbdp3k'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R08', {  }, {'pAKT'  }, {'PI3Ka','AKT','pJNK','CAPPa','Bcl2a'         }, 'C' , [] , 'k1*m2 + k2*m1*m2  - k3*p1 + k4*m2*m3 - k5*m4*p1 + k6*m2*m5'                                                                   , {'Kbak','Kpaak','Kbdak','Kjaa','Kcpia','Kxaa'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R09', {  }, {'TNFR1a'}, {'TNFR1','TNF'                                }, 'C' , [] , 'k3 + k1*m1*m2 - k2*p1'                                                                                                        , {'Ktnf1','Ktnf2','Kbase'}, [], [], [], {}, {}, {[1535 -175], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R10', {  }, {'MEKK1a'}, {'MEKK1','TNFR1a','ROSa','pAKT'               }, 'C' , [] , 'k1*m1 + k2*m1*m2 - k3*p1 + (k4*m1*m3) - (k5*m4*p1)'                                                                           , {'Kbmkk1','Ktamkk1','Kdmkk1','Krakk4','Kaikk4'});
m = pwAddR(m, 'R11', {  }, {'ROSa'  }, {'ROS','pJNK'                                 }, 'C' , [] , 'k1*m1 + (k2*m1*m2) - k3*p1'                                                                                                   , {'Kbros','Kjar','Kdros'});
m = pwAddR(m, 'R12', {  }, {'PTENa' }, {'PTEN','NFkBa'                               }, 'C' , [] , 'k1*m1 - k2*m2*p1 - k3*p1'                                                                                                     , {'Kbpt','Knip','Kdbpt'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R13', {  }, {'Csps3a'}, {'Csps3','pJNK','NFkBa','pAKT','pERK','TNFR1a'}, 'C' , [] , 'k1*m1 + (k2*m1*m2)/(k14+(k10*m2)) - k3*m3*p1 - (k4*p1*m4^k13)/(k11+(k12*m4^k13)) - (k5*m5*p1)/(k6+k7*m5) - k8*p1 + (k9*m6*m1)', {'Kbcs3','Kjacs3','Knics3','Kaics3','Keics3','Keic1','Keic2','Kdbcs3','Ktacs','n1','Kaic1','Kaic2','kn2','Kjac2'}, [], [], [], {}, {}, {[], [], [1 0 0 0 1.8 1 1 1], [1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1;1 0.9 0.1 0.1 1.8 1 4 1]});
m = pwAddR(m, 'R14', {  }, {'CERa'  }, {'CER','TNFR1a','PI3Ka'                       }, 'C' , [] , 'k1*m1 + k2*m1*m2 - k3*p1 - k4*m3*p1'                                                                                          , {'Kbcer','Ktcr','Kdcer','kpicr'});
m = pwAddR(m, 'R15', {  }, {'CAPPa' }, {'CAPP','CERa'                                }, 'C' , [] , 'k1*m1 + k2*m1*m2 - k3*p1'                                                                                                     , {'Kbcpp','Kacp','Kdcpp'});
m = pwAddR(m, 'R16', {  }, {'Bcl2a' }, {'Bcl2i','NFkBa'                                 }, 'C' , [] , 'k1*m1 - k2*m2*p1 - k3*p1'                                                                                                     , {'Kbx','Knix','Kdx'});
%% C - Compartments
% m = pwAddC(m, *ID, *size, outside, spatialDim, name, unit, constant, designerProps, classname, description)
% size:     Size of the volume, e.g. 3.34
% outside:  ID of surrounding compartment
% spatialDimensions: 1, 2 or 3 (default)
% constant: 0 or 1 (default). Boolean, whether the compartment has a constant size.
m = pwAddC(m, 'C1', 1, [], [], [], [], [], [100 100 -0.75 160 160 0.92156862745098 0.92156862745098 0.92156862745098 0 0 0 1], 'compartment');
%% Designer layout properties
m.designerPropsM = [1 1 1 0 0 0 1 41 1920 1084 0.4 1 1 -1258.75 -674.6875 0 0 0 0 0];
%% Y - Observables
% m = pwAddY(m, *ID, *rhs, errorModelRhs, noiseType, unit, name, description, alternativeIDs, designerProps, classname)
m = pwAddY(m, 'FC_pJNK' , 's*(pJNK/basal_JNK)'     );
m = pwAddY(m, 'FC_pAKT' , 's1*(pAKT/basal_AKT)'    , [], [], [], [], [], {}, [100 100 0 100 40 0 0 0 0 0 0 1]);
m = pwAddY(m, 'FC_Csps3', 's2*(Csps3a/basal_Csps3)');
%% A - Algebraic equations
% m = pwAddA(m, *ID, *rhs, description, name, designerProps, classname, targetType, compartment, valueType)
m = pwAddA(m, 'JNK'        , 'JNKT-pJNK'                        , [], [], [985 -305 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'AKT'        , 'AKTT-pAKT'                        , [], [], [-285 1325 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'ERK'        , 'ERKT-pERK'                        , [], [], [-555 1035 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'XG'         , 'XGT-XGa'                          , [], [], [115 -155 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'NFkB'       , 'NFkBT-NFkBa'                      , [], [], [255 -245 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'C1P'        , 'C1PT-C1Pa'                        , [], [], [905 1345 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'RAF'        , 'RAFT-RAFa'                        , [], [], [635 -185 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'PTEN'       , 'PTENT-PTENa'                      , [], [], [415 -485 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'PI3K'       , 'PI3KT - PI3Ka'                    , [], [], [-905 185 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'Csps3'      , 'Csps3T-Csps3a'                    , [], [], [1895 1025 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'TNFR1'      , 'TNFR1T-TNFR1a'                    , [], [], [1545 395 0 100 40 0.6 0.6 0 0 0 0 1], [], 'parameter', 'C1');
m = pwAddA(m, 'basal_JNK'  , '(Kbjnk * JNKT)/(Kbjnk +Kdjnk)'    , [], [], [], [], 'parameter', 'C1');
m = pwAddA(m, 'basal_AKT'  , '(Kbak * AKTT)/(Kbak +Kbdak)'      , [], [], [], [], 'parameter', 'C1');
m = pwAddA(m, 'basal_Csps3', '(Kbcs3 * Csps3T)/(Kbcs3 + Kdbcs3)', [], [], [], [], 'parameter', 'C1');
m = pwAddA(m, 'MEKK1'      , 'MEKK1T - MEKK1a'                  , [], [], [], [], 'parameter', 'C1');
m = pwAddA(m, 'ROS'        , 'ROST - ROSa'                      , [], [], [], [], 'parameter', 'C1');
m = pwAddA(m, 'CER'        , 'CERT - CERa'                      , [], [], [], [], 'parameter', 'C1');
m = pwAddA(m, 'CAPP'       , 'CAPPT - CAPPa'                    , [], [], [], [], 'parameter', 'C1');
m = pwAddA(m, 'Bcl2i'         , 'Bcl2T - Bcl2a'                          , [], [], [], [], 'parameter', 'C1');
%% S - Observation parameters
% m = pwAddS(m, *ID, *value, fitSetting, minValue, maxValue, unit, name, description, usedInTimeTransformation)
m = pwAddS(m, 's' , 0.1, 'global', 0.001, 1);
m = pwAddS(m, 's1', 0.1, 'global', 0.001, 1);
m = pwAddS(m, 's2', 0.1, 'global', 0.001, 1);